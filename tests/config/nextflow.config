def test_dir = '/Users/andersgs/dev/lgi/onetrakr/orkas/tests'

params {
    outdir = "test_output"
    publish_dir_mode = "link"
    enable_conda = false
    reference = "https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/016/889/925/GCF_016889925.1_ASM1688992v1/GCF_016889925.1_ASM1688992v1_genomic.gbff.gz"
    ref_is_complete = true
    chromosome_id = "NZ_CP069563"
    test_data {
        'fastq' {
            read1 = "${test_dir}/test_data/fastq/DRR040053/DRR040053_1.fastq.gz"
            read2 = "${test_dir}/test_data/fastq/DRR040053/DRR040053_2.fastq.gz"
            read1_clean = "${test_dir}/test_data/fastq/DRR040053/DRR040053_1.fastp.fastq.gz"
            read2_clean = "${test_dir}/test_data/fastq/DRR040053/DRR040053_2.fastp.fastq.gz"
            merged_clean = "${test_dir}/test_data/fastq/DRR040053/DRR040053.merged.fastq.gz"
        }
        'assemblies' {
            listeria = "${test_dir}/test_data/assemblies/listeria/GCF_000196035.1_ASM19603v1_genomic.fna"
            salmonella = "${test_dir}/test_data/assemblies/salmonella/GCF_000006945.2_ASM694v2_genomic.fna"
            nmeningitidis = "${test_dir}/test_data/assemblies/neisseria_meningitidis/GCF_008330805.1_ASM833080v1_genomic.fna"
            ngono = "${test_dir}/test_data/assemblies/neisseria_gonorrhoeae/GCF_013030075.1_ASM1303007v1_genomic.fna"
            spyogenes = "${test_dir}/test_data/assemblies/streptococcus_pyogenes/GCF_022869605.1_ASM2286960v1_genomic.fna"
        }
        'vcfs' {
            SRR5276050 = "${test_dir}/test_data/vcfs/SRR5276050.bcftools-annotate.vcf.gz"
        }
        'bams' {
            SRR5276050 = "${test_dir}/test_data/bams/SRR5276050_markdup.bam"
        }
        'masks' {
            SRR5276050 = "${test_dir}/test_data/masks/SRR5276050.bedtools-merge.bed"
        }
        'alignment' {
            aln_5seq = "${test_dir}/test_data/alignment/alignment.fasta"
        }
    }
}

docker {
    enabled = true
}

conda {
    enabled = false
}

profiles {
    reads_qc {
        process {
                withName: 'PHCUE' {
                    publishDir = [
                        path: { "${params.outdir}/reads_qc/phcueqc"},
                        mode: params.publish_dir_mode,
                        pattern: "*.{txt,yml}"
                    ]
                }
                withName: 'LIGHTER' {
                    publishDir = [
                        path: { "${params.outdir}/reads_qc/lighter" },
                        mode: params.publish_dir_mode,
                        pattern: "*.{cor.fq.gz,yml}"
                    ]
                }
                withName: 'FASTP' {
                    ext.args = "--cut_right --trim_poly_g"
                    publishDir = [
                        path: { "${params.outdir}/reads_qc/fastp" },
                        mode: params.publish_dir_mode,
                        pattern: "*.{html,json,log,fastp.fastq.gz,merged.fastq.gz,yml}"
                    ]
                }
        }
    }
    assembly {
        process {
            withName: 'UNICYCLER' {
                ext.args = "--min_fasta_length 500 --no_correct"
                publishDir = [
                    path: { "${params.outdir}/assembly/unicycler" },
                    mode: params.publish_dir_mode,
                    pattern: "*"
                ]
            }
            withName: 'QUAST' {
                ext.args = "--min-contig 500 --no-plots"
                publishDir = [
                    path: { "${params.outdir}/assembly/quast" },
                    mode: params.publish_dir_mode,
                    pattern: "*"
                ]
            }
        }
    }
    typing {
        process {
            withName: 'LISSERO' {
                ext.when = { meta.organism ==~ /Listeria monocytogenes/ }
                publishDir = [
                    path: { "${params.outdir}/typing/lissero" },
                    mode: params.publish_dir_mode,
                    pattern: "*"
                ]
            }
            withName: 'SISTR' {
                ext.when = { meta.organism ==~ /Salmonella enterica/ }
                publishDir = [
                    path: { "${params.outdir}/typing/sistr" },
                    mode: params.publish_dir_mode,
                    pattern: "*"
                ]
            }
            withName: 'EMMTYPER' {
                ext.when = { meta.organism ==~ /Streptococcus pyogenes/ }
                publishDir = [
                    path: { "${params.outdir}/typing/emmtyper" },
                    mode: params.publish_dir_mode,
                    pattern: "*"
                ]
            }
            withName: 'NGMASTER' {
                ext.when = { meta.organism ==~ /Neisseria gonorrhoeae/ }
                publishDir = [
                    path: { "${params.outdir}/typing/ngmaster" },
                    mode: params.publish_dir_mode,
                    pattern: "*"
                ]
            }
            withName: 'MENINGOTYPE' {
                ext.when = { meta.organism ==~ /Neisseria meningitidis/ }
                publishDir = [
                    path: { "${params.outdir}/typing/meningotype" },
                    mode: params.publish_dir_mode,
                    pattern: "*"
                ]
            }
            withName: 'MLST' {
                publishDir = [
                    path: { "${params.outdir}/typing/mlst" },
                    mode: params.publish_dir_mode,
                    pattern: "*"
                ]
            }
            withName: 'AMRFINDERPLUS_RUN' {
                publishDir = [
                    path: { "${params.outdir}/typing/amrfinderplus" },
                    mode: params.publish_dir_mode,
                    pattern: "*"
                ]
            }
        }
    }
    speciation {
        process {
            withName: 'KRAKEN2_KRAKEN2' {
                publishDir = [
                    path: { "${params.outdir}/speciation/kraken2" },
                    mode: params.publish_dir_mode,
                    pattern: "*"
                ]
            }
            withName: 'BRACKEN_BRACKEN' {
                publishDir = [
                    path: { "${params.outdir}/speciation/bracken" },
                    mode: params.publish_dir_mode,
                    pattern: "*"
                ]
            }
        }
    }
    create_masks {
        process {
            withName: 'BEDTOOLS_GENOMECOV' {
                ext.args = '-bg'
                publishDir = [
                    path: { "${params.outdir}/create_masks/bedtools_genomecov" },
                    mode: params.publish_dir_mode,
                    pattern: "*"
                ]
            }
            withName: 'MINIMAP2_ALIGN' {
                ext.args = '-DP -w19 -m200'
                publishDir = [
                    path: { "${params.outdir}/create_masks/minimap2" },
                    mode: params.publish_dir_mode,
                    pattern: "*"
                ]
            }
            withName: 'BEDTOOLS_MERGE' {
                publishDir = [
                    path: { "${params.outdir}/create_masks/bedtools_merge" },
                    mode: params.publish_dir_mode,
                    pattern: "*"
                ]
            }
        }
    }
    reference_preprocessing {
        process {
            withName: 'ANY2FASTA' {
                ext.args = "-u"
                publishDir = [
                    path: { "${params.outdir}/reference_preprocessing/any2fasta" },
                    mode: params.publish_dir_mode,
                    pattern: "*"
                ]
            }
            withName: 'INDEX' {
                publishDir = [
                    path: { "${params.outdir}/reference_preprocessing/index" },
                    mode: params.publish_dir_mode,
                    pattern: "*"
                ]
            }
            if (params.ref_is_complete) {
                withName: 'FILTER' {
                    publishDir = [
                        path: { "${params.outdir}/reference_preprocessing/filter" },
                        mode: params.publish_dir_mode,
                        pattern: "*"
                    ]
                }
                withName: 'INDEX_CHROM' {
                    publishDir = [
                        path: { "${params.outdir}/reference_preprocessing/index_chrom" },
                        mode: params.publish_dir_mode,
                        pattern: "*"
                    ]
                }
            }
        }
    }
    make_alignment {
        process {
            withName: 'BCFTOOLS_INDEX' {
                publishDir = [
                    path: { "${params.outdir}/alignment/bcftools_index" },
                    mode: params.publish_dir_mode,
                    pattern: "*"
                ]
            }
            withName: 'BCFTOOLS_CONSENSUS' {
                ext.args = { "--include 'TYPE=\"snp\"' --sample ${meta.id}" }
                publishDir = [
                    path: { "${params.outdir}/alignment/bcftools_consensus" },
                    mode: params.publish_dir_mode,
                    pattern: "*"
                ]
            }
            withName: 'GOALIGN_APPEND' {
                publishDir = [
                    path: { "${params.outdir}/alignment/goalign_append" },
                    mode: params.publish_dir_mode,
                    pattern: "*"
                ]
            }
            withName: 'GOALIGN_REPLACE' {
                ext.args = "-e -s '[^ACTGactg]' -n '-'"
                publishDir = [
                    path: { "${params.outdir}/alignment/goalign_replace" },
                    mode: params.publish_dir_mode,
                    pattern: "*"
                ]
            }
            withName: 'GOALIGN_CLEANSITES' {
                ext.args = "--cutoff 0"
                publishDir = [
                    path: { "${params.outdir}/alignment/goalign_cleansites" },
                    mode: params.publish_dir_mode,
                    pattern: "*"
                ]
            }
            withName: 'GOALIGN_COMPUTEDIST' {
                ext.args = "-m rawdist"
                publishDir = [
                    path: { "${params.outdir}/alignment/goalign_computedist" },
                    mode: params.publish_dir_mode,
                    pattern: "*"
                ]
            }
        }
    }
    phylogenetic_reconstruction {
        process {
            withName: 'IQTREE' {
                memory = "1G"
                ext.args = { "-m TEST -B 1000 --alrt 1000" }
                publishDir = [
                    path: { "${params.outdir}/phylogenetic_reconstruction/iqtree" },
                    mode: params.publish_dir_mode,
                    pattern: "*"
                ]
            }
            withName: 'GOTREE_REROOTMIDPOINT' {
                publishDir = [
                    path: { "${params.outdir}/phylogenetic_reconstruction/gotree_rerootmidpoint" },
                    mode: params.publish_dir_mode,
                    pattern: "*"
                ]
            }
            withName: 'GOTREE_ROTATESORT' {
                publishDir = [
                    path: { "${params.outdir}/phylogenetic_reconstruction/gotree_rotatesort" },
                    mode: params.publish_dir_mode,
                    pattern: "*"
                ]
            }
        }
    }
    variant_detection {
        params {
         var_detection_mode = 'bcftools'
         minqual = 10
         mincov = 2 
         minfrac = 0.5
        }
        process {
            withName: 'SAMTOOLS_FAIDX' {
                publishDir = [
                    path: { "${params.outdir}/variant_detection/samtools-faidx" },
                    mode: params.publish_dir_mode,
                    pattern: "*"
                ]
            }
            withName: 'BOWTIE2_ALIGN' {
                ext.args = { "--very-sensitive-local --rg-id ${meta.id} --rg 'SM:${meta.id}'" }
                ext.args2 = { "-n -l 0" }
                publishDir = [
                    path: { "${params.outdir}/variant_detection/bowtie2-align" },
                    mode: params.publish_dir_mode,
                    pattern: "*"
                ]
            }
            withName: 'SAMCLIP' {
                ext.args = { "--max 10" }
                ext.prefix = { "${meta.id}_samclip"}
                publishDir = [
                    path: { "${params.outdir}/variant_detection/samclip" },
                    mode: params.publish_dir_mode,
                    pattern: "*"
                ]
            }
            withName: 'SAMTOOLS_FIXMATE' {
                ext.args = { "-m" }
                ext.prefix = { "${meta.id}.samtools-fixmate"}
                publishDir = [
                    path: { "${params.outdir}/variant_detection/samtools-fixmate" },
                    mode: params.publish_dir_mode,
                    pattern: "*"
                ]
            }
            withName: 'SAMTOOLS_SORT_NAME' {
                ext.args = { "-l 0 -n" }
                ext.prefix = { "${meta.id}.samtools-sort-name"}
                publishDir = [
                    path: { "${params.outdir}/variant_detection/samtools-sort-name" },
                    mode: params.publish_dir_mode,
                    pattern: "*"
                ]
            }
            withName: 'SAMTOOLS_SORT_ORDER' {
                ext.args = { "-l 0" }
                ext.prefix = { "${meta.id}.samtools-sort-order"}
                publishDir = [
                    path: { "${params.outdir}/variant_detection/samtools-sort" },
                    mode: params.publish_dir_mode,
                    pattern: "*"
                ]
            }
            withName: 'SAMTOOLS_MARKDUP' {
                ext.args = { "-r -s --write-index -l 600" }
                ext.prefix = { "${meta.id}_markdup"}
                publishDir = [
                    path: { "${params.outdir}/variant_detection/samtools-markdup" },
                    mode: params.publish_dir_mode,
                    pattern: "*"
                ]
            }
            if (params.var_detection_mode == 'freebayes') {
                withName: 'FREEBAYES' {
                    ext.args = { "-p 2 -P 0 -C 2 -F 0.05 --min-coverage ${params.mincov} --min-repeat-entropy 1.0 -q ${params.basequal} -m ${params.mapqual} --strict-vcf" }
                    ext.prefix = { "${meta.id}_raw"}
                    publishDir = [
                        path: { "${params.outdir}/variant_detection/freebayes" },
                        mode: params.publish_dir_mode,
                        pattern: "*"
                    ]
                }
                withName: 'BCFTOOLS_INDEX' {
                    publishDir = [
                        path: { "${params.outdir}/variant_detection/bcftools-index" },
                        mode: params.publish_dir_mode,
                        pattern: "*"
                    ]
                }
                withName: 'BCFTOOLS_VIEW' {
                    ext.args = { "--include \"FMT/GT='1/1' && QUAL>=${params.minqual} && FMT/DP>=${params.mincov} && (FMT/AO)/(FMT/DP)>=${params.minfrac}\"" }
                    ext.prefix = { "${meta.id}.bcftools-view"}
                    publishDir = [
                        path: { "${params.outdir}/variant_detection/bcftools-view" },
                        mode: params.publish_dir_mode,
                        pattern: "*"
                    ]
                }
            }
            if (params.var_detection_mode == 'bcftools' ) {
                withName: 'BCFTOOLS_MPILEUP' {
                    ext.args = { "-Ou -a 'FORMAT/AD,FORMAT/ADF,FORMAT/ADR,FORMAT/DP,FORMAT/SCR,FORMAT/SCR,INFO/AD,INFO/ADR,INFO/ADF,INFO/SCR' " }
                    ext.args2 = { "-m -p 1.1e-4 -a 'FORMAT/GQ,FORMAT/GP' " }
                    ext.args3 = { "--include \"FMT/GT='1/1' && QUAL>=${params.minqual} && FMT/DP>=${params.mincov} && (FMT/AD[0:1])/(FMT/DP)>=${params.minfrac}\"" }
                    ext.prefix = { "${meta.id}.bcftools-mpilelup" }
                    publishDir = [
                        path: { "${params.outdir}/variant_detection/bcftools-mpileup" },
                        mode: params.publish_dir_mode,
                        pattern: "*"
                    ]
                }
            }
            withName: 'BCFTOOLS_NORM' {
                ext.args = { "-a" }
                ext.prefix = { "${meta.id}.bcftools-norm" }
                publishDir = [
                    path: { "${params.outdir}/variant_detection/bcftools-norm" },
                    mode: params.publish_dir_mode,
                    pattern: "*"
                ]
            }
            withName: 'BCFTOOLS_ANNOTATE' {
                ext.args = {
                    x = ["TYPE", "DP", "RO", "AO", "AB"].collect{it1 -> "INFO/$it1"};
                    y = ["GT", "DP", "RO", "AO", "QR", "QA", "GL"].collect{it2 -> "FORMAT/$it2"};
                    "--remove " + x.join(",") + y.join(",")
                    }
                ext.prefix = { "${meta.id}.bcftools-annotate" }
                publishDir = [
                    path: { "${params.outdir}/variant_detection/bcftools-annotate" },
                    mode: params.publish_dir_mode,
                    pattern: "*"
                ]
            }
        }
    }
}
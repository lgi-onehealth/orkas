process {
    docker.enabled = true
    withLabel:process_low {
        cpus = 2
        memory = "2G"
        disk = "2G"
        //machineType = 'n2-standard-2'
    }
    withLabel:process_medium {
        cpus = 4
        memory = "8G"
        disk = "4G"
        //machineType = 'n2-standard-4'
    }
    withLabel:process_high {
        cpus = 8
        memory = "32G"
        disk = "12G"
        //machineType = 'n2-standard-8'
    }
    withLabel:process_high_cpu {
        cpus = 32
        memory = "64G"
        disk = "12G"
    }
    withName: 'FASTP' {
        ext.args = "--cut_right --trim_poly_g"
    }
    withName: 'PHCUE' {
        publishDir = [
            path: { "${params.outdir}/${meta.id}"},
            mode: params.publish_dir_mode,
            pattern: "*.txt"
        ]
    }
    withName: 'ONE_FLOW:SPECIATION:BRACKEN_BRACKEN' {
        publishDir = [
            path: { "${params.outdir}/${meta.id}"},
            mode: params.publish_dir_mode,
            pattern: "*.tsv"
        ]
    }
    withName: 'BOWTIE2_ALIGN' {
        ext.args = { "--very-sensitive-local --rg-id ${meta.id} --rg 'SM:${meta.id}'" }
        ext.args2 = { "-n -l 0" }
        ext.prefix = { "${meta.id}_raw" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.bam,*.sam"
        ]
    }
    withName: 'SAMCLIP' {
        ext.args = { "--max 10" }
        ext.prefix = { "${meta.id}_samclip"}
    }
    withName: 'SAMTOOLS_FIXMATE' {
        ext.args = { "-m" }
        ext.prefix = { "${meta.id}_fixmate"}
    }
    withName: 'SAMTOOLS_SORT_NAME' {
        ext.args = { "-l 0 -n" }
        ext.prefix = { "${meta.id}_sort"}
    }
    withName: 'SAMTOOLS_SORT_ORDER' {
        ext.args = { "-l 0" }
        ext.prefix = { "${meta.id}_sort"}
    }
    withName: 'SAMTOOLS_MARKDUP' {
        ext.args = { "-r -s --write-index -l 600" }
        ext.prefix = { "${meta.id}_markdup"}
        publishDir = [
            path: { "${params.outdir}/${meta.id}" },
            mode: params.publish_dir_mode,
            pattern: "*.{bam,csi}"
        ]
    }
    withName: 'FREEBAYES' {
        ext.args = { "-p 2 -P 0 -C 2 -F 0.05 --min-coverage ${params.mincov} --min-repeat-entropy 1.0 -q ${params.basequal} -m ${params.mapqual} --strict-vcf" }
        ext.prefix = { "${meta.id}_raw"}
        publishDir = [
            path: { "${params.outdir}/${meta.id}/" },
            mode: params.publish_dir_mode,
            pattern: "*.vcf"
        ]
    }
    withName: 'ONE_FLOW:VARIANT_DETECTION:BCFTOOLS_MPILEUP' {
        ext.args = { "-Ou -a 'FORMAT/AD,FORMAT/ADF,FORMAT/ADR,FORMAT/DP,FORMAT/SCR,FORMAT/SCR,INFO/AD,INFO/ADR,INFO/ADF,INFO/SCR' " }
        ext.args2 = { "-m -p 1.1e-4 -a 'FORMAT/GQ,FORMAT/GP' " }
        ext.args3 = { "--include \"FMT/GT='1/1' && QUAL>=${params.minqual} && FMT/DP>=${params.mincov} && (FMT/AD[0:1])/(FMT/DP)>=${params.minfrac}\"" }
        ext.prefix = { "${meta.id}_raw" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/" },
            mode: params.publish_dir_mode,
            pattern: "*.vcf.gz"
        ]
    }
    withName: 'ONE_FLOW:VARIANT_DETECTION:BCFTOOLS_VIEW' {
        ext.args = { "--include \"FMT/GT='1/1' && QUAL>=${params.minqual} && FMT/DP>=${params.mincov} && (FMT/AO)/(FMT/DP)>=${params.minfrac}\"" }
        ext.prefix = { "${meta.id}_filtered_snps"}
    }
    withName: 'BCFTOOLS_NORM' {
        ext.args = { "-a" }
        ext.prefix = { "${meta.id}_norm" }
    }
    withName: 'BCFTOOLS_ANNOTATE' {
        ext.args = {
            x = ["TYPE", "DP", "RO", "AO", "AB"].collect{it1 -> "INFO/$it1"};
            y = ["GT", "DP", "RO", "AO", "QR", "QA", "GL"].collect{it2 -> "FORMAT/$it2"};
            "--remove " + x.join(",") + y.join(",")
            }
        ext.prefix = { "${meta.id}_annotated" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/" },
            mode: params.publish_dir_mode,
            pattern: "*.{vcf.gz,vcf}"
        ]
    }
    withName: 'ONE_FLOW:ALIGN:BCFTOOLS_CONSENSUS' {
        ext.args = { "--include 'TYPE=\"snp\"' --sample ${meta.id}" }
        ext.prefix = { "${meta.id}_subs"}
        publishDir = [
            path: { "${params.outdir}/${meta.id}/" },
            mode: params.publish_dir_mode,
            pattern: "*.fa"
        ]
    }
    withName: 'ONE_FLOW:CREATE_MASKS:BEDTOOLS_GENOMECOV' {
        ext.args = '-bg'
        ext.prefix = { "${meta.id}_genomecov"}
        publishDir = [
            path: { "${params.outdir}/${meta.id}/" },
            mode: params.publish_dir_mode,
            pattern: "*.bed"
        ]
    }
    withName: 'ONE_FLOW:CREATE_MASKS:MINIMAP2_ALIGN' {
        ext.args = '-DP -w19 -m200'
        ext.prefix = { "${meta.id}_minimap2"}
        publishDir = [
            path: { "${params.outdir}/${meta.id}/" },
            mode: params.publish_dir_mode,
            pattern: "*.{bed,paf}"
        ]
    }
    withName: 'ONE_FLOW:CREATE_MASKS:BEDTOOLS_MERGE' {
        ext.prefix = { "${meta.id}_merge"}
        publishDir = [
            path: { "${params.outdir}/${meta.id}/" },
            mode: params.publish_dir_mode,
            pattern: "*.bed"
        ]
    }
    withName: 'ONE_FLOW:ASSEMBLY:UNICYCLER' {
        ext.args = { "--no_correct --min_fasta_length 500" }
        ext.prefix = { "${meta.id}_unicycler"}
        publishDir = [
            path: { "${params.outdir}/${meta.id}/" },
            mode: params.publish_dir_mode,
            pattern: "*.{fa.gz,gfa.gz,log}"
        ]
        errorStrategy = 'ignore'
    }
    withName: 'ONE_FLOW:TYPING:SISTR' {
        ext.prefix = { "${meta.id}_sistr" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/" },
            mode: params.publish_dir_mode,
            pattern: "*.{tab}"
        ]
    }
    withName: 'ONE_FLOW:TYPING:MLST' {
        ext.prefix = { "${meta.id}_mlst" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/" },
            mode: params.publish_dir_mode,
            pattern: "*.{tsv}"
        ]
    }
    withName: 'ONE_FLOW:TYPING:AMRFINDERPLUS_RUN' {
        ext.args = { "--name ${meta.id} -c 0.9" }
        ext.prefix = { "${meta.id}_amrfinderplus"}
        publishDir = [
            path: { "${params.outdir}/${meta.id}/" },
            mode: params.publish_dir_mode,
            pattern: "*.{tsv}"
        ]
    }
    withName: 'ONE_FLOW:TREE_BUILD:GOALIGN_APPEND' {
        publishDir = [
            path: { "${params.outdir}/trees/" },
            mode: params.publish_dir_mode,
            pattern: "*.{fa,fna,fasta,fasta.gz}"
        ]
    }
    withName: 'ONE_FLOW:TREE_BUILD:IQTREE' {
        ext.args = { "-m TEST -B 1000 --alrt 1000" }
        publishDir = [
            path: { "${params.outdir}/trees/" },
            mode: params.publish_dir_mode,
            pattern: "*.{treefile,tre,log}"
        ]
    }
}